"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[590],{3227:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"notebooks/stomatal-conductance-analysis","title":"Community Notebook: Stomatal Conductance Analysis with PhyTorch","description":"This notebook demonstrates fitting stomatal conductance models to understand plant water use efficiency and stomatal behavior.","source":"@site/docs/notebooks/stomatal-conductance-analysis.md","sourceDirName":"notebooks","slug":"/notebooks/stomatal-conductance-analysis","permalink":"/docs/notebooks/stomatal-conductance-analysis","draft":false,"unlisted":false,"editUrl":"https://github.com/PlantSimulationLab/phytorch/tree/main/website/docs/notebooks/stomatal-conductance-analysis.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Community Notebook: Photosynthesis Analysis with PhyTorch","permalink":"/docs/notebooks/photosynthesis-analysis"},"next":{"title":"API Reference","permalink":"/docs/api/"}}');var s=t(4848),l=t(8453);const a={sidebar_position:2},o="Community Notebook: Stomatal Conductance Analysis with PhyTorch",r={},d=[{value:"Overview",id:"overview",level:2},{value:"Load and Prepare Data",id:"load-and-prepare-data",level:2},{value:"Fit Multiple Stomatal Conductance Models",id:"fit-multiple-stomatal-conductance-models",level:2},{value:"Visualize Model Performance",id:"visualize-model-performance",level:2},{value:"Stomatal Response to VPD",id:"stomatal-response-to-vpd",level:2},{value:"Calculate Intrinsic Water Use Efficiency (iWUE)",id:"calculate-intrinsic-water-use-efficiency-iwue",level:2},{value:"Key Insights",id:"key-insights",level:2},{value:"Model Selection",id:"model-selection",level:3},{value:"Biological Interpretation",id:"biological-interpretation",level:3},{value:"Stomatal Limitations to Photosynthesis",id:"stomatal-limitations-to-photosynthesis",level:3},{value:"Model Comparison Table",id:"model-comparison-table",level:2},{value:"Recommendations",id:"recommendations",level:2},{value:"Limitations",id:"limitations",level:2},{value:"References",id:"references",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"community-notebook-stomatal-conductance-analysis-with-phytorch",children:"Community Notebook: Stomatal Conductance Analysis with PhyTorch"})}),"\n",(0,s.jsx)(n.p,{children:"This notebook demonstrates fitting stomatal conductance models to understand plant water use efficiency and stomatal behavior."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Goal"}),": Compare different stomatal conductance models (Medlyn, Ball-Woodrow-Berry, Buckley-Mott-Farquhar) and their ability to predict stomatal responses to environmental conditions"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dataset"}),": LI-COR 6800 measurements across a range of VPD and light conditions"]}),"\n",(0,s.jsx)(n.h2,{id:"load-and-prepare-data",children:"Load and Prepare Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from phytorch import *\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import stats\n\n# Load stomatal conductance data\ndf = pd.read_csv(\'data/stomatal_measurements.csv\')\n\n# Initialize LI-COR data object\nlcd = stomatal.initLicordata(df, preprocess=True)\n\nprint(f"Loaded {len(df)} measurements")\nprint(f"VPD range: {lcd.VPD.min():.2f} - {lcd.VPD.max():.2f} kPa")\nprint(f"gs range: {lcd.Cond.min():.3f} - {lcd.Cond.max():.3f} mol/m\xb2/s")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"fit-multiple-stomatal-conductance-models",children:"Fit Multiple Stomatal Conductance Models"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Define models to compare\nmodel_types = ['MED', 'BWB', 'BMF']\nmodel_names = {\n    'MED': 'Medlyn (USO)',\n    'BWB': 'Ball-Woodrow-Berry',\n    'BMF': 'Buckley-Mott-Farquhar'\n}\n\nresults = {}\n\n# Fit each model\nfor model_type in model_types:\n    print(f\"\\nFitting {model_names[model_type]} model...\")\n\n    # Initialize model\n    model = stomatal.model(lcd, model_type=model_type)\n\n    # Fit model\n    fitresult = stomatal.fit(model, learn_rate=0.01, maxiteration=10000)\n\n    # Get predictions\n    predicted = model.predict(lcd)\n\n    # Calculate R\xb2\n    ss_res = np.sum((lcd.Cond - predicted)**2)\n    ss_tot = np.sum((lcd.Cond - np.mean(lcd.Cond))**2)\n    r_squared = 1 - (ss_res / ss_tot)\n\n    # Calculate RMSE\n    rmse = np.sqrt(np.mean((lcd.Cond - predicted)**2))\n\n    # Store results\n    results[model_type] = {\n        'model': model,\n        'fit': fitresult,\n        'predicted': predicted,\n        'r2': r_squared,\n        'rmse': rmse\n    }\n\n    print(f\"  R\xb2 = {r_squared:.3f}\")\n    print(f\"  RMSE = {rmse:.4f} mol/m\xb2/s\")\n\n    # Print fitted parameters\n    if model_type == 'MED':\n        print(f\"  g0 = {fitresult.params['g0']:.4f} mol/m\xb2/s\")\n        print(f\"  g1 = {fitresult.params['g1']:.2f}\")\n    elif model_type == 'BWB':\n        print(f\"  g0 = {fitresult.params['g0']:.4f} mol/m\xb2/s\")\n        print(f\"  g1 = {fitresult.params['g1']:.2f}\")\n"})}),"\n",(0,s.jsx)(n.h2,{id:"visualize-model-performance",children:"Visualize Model Performance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\nfor idx, model_type in enumerate(model_types):\n    ax = axes[idx]\n\n    observed = lcd.Cond\n    predicted = results[model_type]['predicted']\n    r2 = results[model_type]['r2']\n    rmse = results[model_type]['rmse']\n\n    # 1:1 plot\n    ax.scatter(observed, predicted, alpha=0.5, s=40)\n\n    # 1:1 line\n    min_val = min(observed.min(), predicted.min())\n    max_val = max(observed.max(), predicted.max())\n    ax.plot([min_val, max_val], [min_val, max_val], 'r--', linewidth=2, label='1:1')\n\n    ax.set_xlabel('Observed gs (mol/m\xb2/s)', fontsize=11)\n    ax.set_ylabel('Predicted gs (mol/m\xb2/s)', fontsize=11)\n    ax.set_title(f\"{model_names[model_type]}\\nR\xb2 = {r2:.3f}, RMSE = {rmse:.4f}\",\n                 fontsize=11, fontweight='bold')\n    ax.legend()\n    ax.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.savefig('model_comparison.png', dpi=300, bbox_inches='tight')\nplt.show()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"stomatal-response-to-vpd",children:"Stomatal Response to VPD"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Analyze gs response to VPD using the best model (e.g., Medlyn)\nbest_model = 'MED'\npredicted = results[best_model]['predicted']\n\n# Bin data by VPD\nvpd_bins = np.linspace(lcd.VPD.min(), lcd.VPD.max(), 10)\nvpd_centers = (vpd_bins[:-1] + vpd_bins[1:]) / 2\n\ngs_mean = []\ngs_std = []\n\nfor i in range(len(vpd_bins)-1):\n    mask = (lcd.VPD >= vpd_bins[i]) & (lcd.VPD < vpd_bins[i+1])\n    gs_mean.append(lcd.Cond[mask].mean())\n    gs_std.append(lcd.Cond[mask].std())\n\n# Plot gs vs VPD\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Scatter plot of all data\nax.scatter(lcd.VPD, lcd.Cond, alpha=0.3, s=30, label='Observed', color='blue')\n\n# Binned means with error bars\nax.errorbar(vpd_centers, gs_mean, yerr=gs_std, fmt='o-', linewidth=2,\n            markersize=8, capsize=5, label='Binned mean \xb1 SD', color='red')\n\n# Model prediction across VPD range\nvpd_range = np.linspace(lcd.VPD.min(), lcd.VPD.max(), 100)\n# Note: This would require generating predictions at different VPD values\n# with constant A and other conditions\n\nax.set_xlabel('VPD (kPa)', fontsize=12)\nax.set_ylabel('gs (mol/m\xb2/s)', fontsize=12)\nax.set_title('Stomatal Conductance Response to VPD', fontsize=14, fontweight='bold')\nax.legend()\nax.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.savefig('gs_vpd_response.png', dpi=300, bbox_inches='tight')\nplt.show()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"calculate-intrinsic-water-use-efficiency-iwue",children:"Calculate Intrinsic Water Use Efficiency (iWUE)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# iWUE = A/gs\n# Higher iWUE indicates more carbon gained per unit water lost\n\nlcd['iWUE'] = lcd.Photo / lcd.Cond  # \u03bcmol CO2 / mol H2O\n\n# Plot iWUE vs VPD\nfig, ax = plt.subplots(figsize=(10, 6))\n\nax.scatter(lcd.VPD, lcd.iWUE, alpha=0.5, s=50)\n\n# Fit linear regression\nslope, intercept, r_value, p_value, std_err = stats.linregress(lcd.VPD, lcd.iWUE)\n\n# Plot regression line\nvpd_range = np.linspace(lcd.VPD.min(), lcd.VPD.max(), 100)\nax.plot(vpd_range, slope * vpd_range + intercept, 'r-', linewidth=2,\n        label=f'Linear fit: R\xb2 = {r_value**2:.3f}, p = {p_value:.4f}')\n\nax.set_xlabel('VPD (kPa)', fontsize=12)\nax.set_ylabel('iWUE (\u03bcmol CO\u2082 / mol H\u2082O)', fontsize=12)\nax.set_title('Intrinsic Water Use Efficiency vs VPD', fontsize=14, fontweight='bold')\nax.legend()\nax.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.savefig('iwue_vpd.png', dpi=300, bbox_inches='tight')\nplt.show()\n\nprint(f\"\\niWUE Statistics:\")\nprint(f\"  Mean iWUE: {lcd.iWUE.mean():.2f} \xb1 {lcd.iWUE.std():.2f}\")\nprint(f\"  Slope with VPD: {slope:.2f} (p = {p_value:.4f})\")\n"})}),"\n",(0,s.jsx)(n.h2,{id:"key-insights",children:"Key Insights"}),"\n",(0,s.jsx)(n.h3,{id:"model-selection",children:"Model Selection"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Medlyn Model (MED)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses VPD directly in formulation"}),"\n",(0,s.jsx)(n.li,{children:"Generally performs well across species"}),"\n",(0,s.jsx)(n.li,{children:"The g1 parameter reflects stomatal sensitivity to VPD"}),"\n",(0,s.jsx)(n.li,{children:"Typical g1 values: 2-8 for C3 plants"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Ball-Woodrow-Berry (BWB)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses relative humidity"}),"\n",(0,s.jsx)(n.li,{children:"Historically important model"}),"\n",(0,s.jsx)(n.li,{children:"May perform less well at extreme VPD"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Buckley-Mott-Farquhar (BMF)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"More mechanistic, optimization-based"}),"\n",(0,s.jsx)(n.li,{children:"Can provide insights into stomatal optimization strategy"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"biological-interpretation",children:"Biological Interpretation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Extract g1 from Medlyn model\ng1 = results[\'MED\'][\'fit\'].params[\'g1\']\ng0 = results[\'MED\'][\'fit\'].params[\'g0\']\n\nprint(f"\\nMedlyn Model Parameters:")\nprint(f"  g0 (residual conductance): {g0:.4f} mol/m\xb2/s")\nprint(f"  g1 (stomatal sensitivity): {g1:.2f}")\n\n# Interpret g1\nif g1 < 3:\n    interpretation = "Water-conservative strategy (low sensitivity to VPD)"\nelif g1 > 6:\n    interpretation = "Water-spending strategy (high sensitivity to VPD)"\nelse:\n    interpretation = "Intermediate strategy"\n\nprint(f"  Interpretation: {interpretation}")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"stomatal-limitations-to-photosynthesis",children:"Stomatal Limitations to Photosynthesis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Calculate stomatal limitation\n# l_s = (Ca - Ci) / Ca\n\nlcd[\'stomatal_limitation\'] = (lcd.CO2R - lcd.Ci) / lcd.CO2R\n\nprint(f"\\nStomatal Limitation:")\nprint(f"  Mean: {lcd.stomatal_limitation.mean():.3f}")\nprint(f"  Range: {lcd.stomatal_limitation.min():.3f} - {lcd.stomatal_limitation.max():.3f}")\n\n# Higher values indicate greater stomatal limitation\nif lcd.stomatal_limitation.mean() > 0.3:\n    print("  \u26a0 Substantial stomatal limitation detected")\n    print("    Consider if water stress is present")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"model-comparison-table",children:"Model Comparison Table"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Create summary table\nsummary = pd.DataFrame({\n    'Model': [model_names[m] for m in model_types],\n    'R\xb2': [results[m]['r2'] for m in model_types],\n    'RMSE': [results[m]['rmse'] for m in model_types]\n})\n\nprint(\"\\nModel Performance Summary:\")\nprint(summary.to_string(index=False))\n\n# Identify best model\nbest_idx = summary['R\xb2'].idxmax()\nprint(f\"\\nBest performing model: {summary.loc[best_idx, 'Model']}\")\n"})}),"\n",(0,s.jsx)(n.h2,{id:"recommendations",children:"Recommendations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For drought studies"}),": Use Medlyn model with g1 as indicator of drought response"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For WUE analysis"}),": Calculate iWUE and examine relationship with environmental factors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For breeding programs"}),": Select for optimal g1 values balancing carbon gain and water loss"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For modeling"}),": Consider temperature effects on gs (currently not included in basic models)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Models assume steady-state conditions"}),"\n",(0,s.jsx)(n.li,{children:"Dynamic stomatal responses (stomatal kinetics) not captured"}),"\n",(0,s.jsx)(n.li,{children:"Hydraulic signals and hormonal controls not explicitly modeled"}),"\n",(0,s.jsx)(n.li,{children:"Temperature effects on gs parameters may need consideration"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Medlyn, B. E., et al. (2011). Reconciling the optimal and empirical approaches to modelling stomatal conductance. ",(0,s.jsx)(n.em,{children:"Global Change Biology"}),", 17(6), 2134-2144."]}),"\n",(0,s.jsxs)(n.li,{children:["Ball, J. T., Woodrow, I. E., & Berry, J. A. (1987). A model predicting stomatal conductance. ",(0,s.jsx)(n.em,{children:"Progress in Photosynthesis Research"}),", 4, 221-224."]}),"\n",(0,s.jsxs)(n.li,{children:["Buckley, T. N., Mott, K. A., & Farquhar, G. D. (2003). A hydromechanical and biochemical model of stomatal conductance. ",(0,s.jsx)(n.em,{children:"Plant, Cell & Environment"}),", 26(10), 1767-1785."]}),"\n",(0,s.jsx)(n.li,{children:"Lei, T., Rizzo, K. T., & Bailey, B. N. (2025). PhoTorch: a robust and generalized biochemical photosynthesis model fitting package."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);